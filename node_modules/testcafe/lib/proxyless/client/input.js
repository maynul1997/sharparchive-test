"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("../types");
const event_descriptor_1 = __importDefault(require("./event-descriptor"));
class ProxylessInput {
    constructor(dispatchEventFn) {
        this._dispatchEventFn = dispatchEventFn;
    }
    async mouseDown(options) {
        const eventOptions = await event_descriptor_1.default.createMouseEventOptions('mousePressed', options);
        return this._dispatchEventFn.single(types_1.EventType.Mouse, eventOptions);
    }
    async mouseUp(options) {
        const eventOptions = await event_descriptor_1.default.createMouseEventOptions('mouseReleased', options);
        return this._dispatchEventFn.single(types_1.EventType.Mouse, eventOptions);
    }
    keyDown(options) {
        const eventOptions = event_descriptor_1.default.createKeyDownOptions(options);
        return this._dispatchEventFn.single(types_1.EventType.Keyboard, eventOptions);
    }
    keyUp(options) {
        const eventOptions = event_descriptor_1.default.createKeyUpOptions(options);
        return this._dispatchEventFn.single(types_1.EventType.Keyboard, eventOptions);
    }
    executeEventSequence(eventSequence) {
        return this._dispatchEventFn.sequence(eventSequence);
    }
    async createMouseMoveEvent(currPosition) {
        const options = await event_descriptor_1.default.createMouseEventOptions('mouseMoved', {
            options: {
                clientX: currPosition.x,
                clientY: currPosition.y,
                button: 'none',
            },
        });
        return {
            type: types_1.EventType.Mouse,
            options,
        };
    }
}
exports.default = ProxylessInput;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcHJveHlsZXNzL2NsaWVudC9pbnB1dC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLG9DQUFxQztBQUlyQywwRUFBb0Q7QUFFcEQsTUFBcUIsY0FBYztJQUUvQixZQUFhLGVBQWdDO1FBQ3pDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxlQUFlLENBQUM7SUFDNUMsQ0FBQztJQUVNLEtBQUssQ0FBQyxTQUFTLENBQUUsT0FBWTtRQUNoQyxNQUFNLFlBQVksR0FBRyxNQUFNLDBCQUFrQixDQUFDLHVCQUF1QixDQUFDLGNBQWMsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUUvRixPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsaUJBQVMsQ0FBQyxLQUFLLEVBQUUsWUFBWSxDQUFDLENBQUM7SUFDdkUsQ0FBQztJQUVNLEtBQUssQ0FBQyxPQUFPLENBQUUsT0FBWTtRQUM5QixNQUFNLFlBQVksR0FBRyxNQUFNLDBCQUFrQixDQUFDLHVCQUF1QixDQUFDLGVBQWUsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUVoRyxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsaUJBQVMsQ0FBQyxLQUFLLEVBQUUsWUFBWSxDQUFDLENBQUM7SUFDdkUsQ0FBQztJQUVNLE9BQU8sQ0FBRSxPQUF5QjtRQUNyQyxNQUFNLFlBQVksR0FBRywwQkFBa0IsQ0FBQyxvQkFBb0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUV0RSxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsaUJBQVMsQ0FBQyxRQUFRLEVBQUUsWUFBWSxDQUFDLENBQUM7SUFDMUUsQ0FBQztJQUNNLEtBQUssQ0FBRSxPQUF5QjtRQUNuQyxNQUFNLFlBQVksR0FBRywwQkFBa0IsQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUVwRSxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsaUJBQVMsQ0FBQyxRQUFRLEVBQUUsWUFBWSxDQUFDLENBQUM7SUFDMUUsQ0FBQztJQUVNLG9CQUFvQixDQUFFLGFBQW9CO1FBQzdDLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUN6RCxDQUFDO0lBRU0sS0FBSyxDQUFDLG9CQUFvQixDQUFFLFlBQW9DO1FBQ25FLE1BQU0sT0FBTyxHQUFHLE1BQU0sMEJBQWtCLENBQUMsdUJBQXVCLENBQUMsWUFBWSxFQUFFO1lBQzNFLE9BQU8sRUFBRTtnQkFDTCxPQUFPLEVBQUUsWUFBWSxDQUFDLENBQUM7Z0JBQ3ZCLE9BQU8sRUFBRSxZQUFZLENBQUMsQ0FBQztnQkFDdkIsTUFBTSxFQUFHLE1BQU07YUFDbEI7U0FDSixDQUFDLENBQUM7UUFFSCxPQUFPO1lBQ0gsSUFBSSxFQUFFLGlCQUFTLENBQUMsS0FBSztZQUNyQixPQUFPO1NBQ1YsQ0FBQztJQUNOLENBQUM7Q0FDSjtBQS9DRCxpQ0ErQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudFR5cGUgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBBeGlzVmFsdWVzRGF0YSB9IGZyb20gJy4uLy4uL2NsaWVudC9jb3JlL3V0aWxzL3ZhbHVlcy9heGlzLXZhbHVlcyc7XG5pbXBvcnQgeyBTaW11bGF0ZWRLZXlJbmZvIH0gZnJvbSAnLi9rZXktcHJlc3MvdXRpbHMnO1xuaW1wb3J0IHsgRGlzcGF0Y2hFdmVudEZuIH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgQ0RQRXZlbnREZXNjcmlwdG9yIGZyb20gJy4vZXZlbnQtZGVzY3JpcHRvcic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFByb3h5bGVzc0lucHV0IHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9kaXNwYXRjaEV2ZW50Rm46IERpc3BhdGNoRXZlbnRGbjtcbiAgICBjb25zdHJ1Y3RvciAoZGlzcGF0Y2hFdmVudEZuOiBEaXNwYXRjaEV2ZW50Rm4pIHtcbiAgICAgICAgdGhpcy5fZGlzcGF0Y2hFdmVudEZuID0gZGlzcGF0Y2hFdmVudEZuO1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBtb3VzZURvd24gKG9wdGlvbnM6IGFueSk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCBldmVudE9wdGlvbnMgPSBhd2FpdCBDRFBFdmVudERlc2NyaXB0b3IuY3JlYXRlTW91c2VFdmVudE9wdGlvbnMoJ21vdXNlUHJlc3NlZCcsIG9wdGlvbnMpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLl9kaXNwYXRjaEV2ZW50Rm4uc2luZ2xlKEV2ZW50VHlwZS5Nb3VzZSwgZXZlbnRPcHRpb25zKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgbW91c2VVcCAob3B0aW9uczogYW55KTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IGV2ZW50T3B0aW9ucyA9IGF3YWl0IENEUEV2ZW50RGVzY3JpcHRvci5jcmVhdGVNb3VzZUV2ZW50T3B0aW9ucygnbW91c2VSZWxlYXNlZCcsIG9wdGlvbnMpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLl9kaXNwYXRjaEV2ZW50Rm4uc2luZ2xlKEV2ZW50VHlwZS5Nb3VzZSwgZXZlbnRPcHRpb25zKTtcbiAgICB9XG5cbiAgICBwdWJsaWMga2V5RG93biAob3B0aW9uczogU2ltdWxhdGVkS2V5SW5mbyk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCBldmVudE9wdGlvbnMgPSBDRFBFdmVudERlc2NyaXB0b3IuY3JlYXRlS2V5RG93bk9wdGlvbnMob3B0aW9ucyk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX2Rpc3BhdGNoRXZlbnRGbi5zaW5nbGUoRXZlbnRUeXBlLktleWJvYXJkLCBldmVudE9wdGlvbnMpO1xuICAgIH1cbiAgICBwdWJsaWMga2V5VXAgKG9wdGlvbnM6IFNpbXVsYXRlZEtleUluZm8pOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3QgZXZlbnRPcHRpb25zID0gQ0RQRXZlbnREZXNjcmlwdG9yLmNyZWF0ZUtleVVwT3B0aW9ucyhvcHRpb25zKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5fZGlzcGF0Y2hFdmVudEZuLnNpbmdsZShFdmVudFR5cGUuS2V5Ym9hcmQsIGV2ZW50T3B0aW9ucyk7XG4gICAgfVxuXG4gICAgcHVibGljIGV4ZWN1dGVFdmVudFNlcXVlbmNlIChldmVudFNlcXVlbmNlOiBhbnlbXSk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGlzcGF0Y2hFdmVudEZuLnNlcXVlbmNlKGV2ZW50U2VxdWVuY2UpO1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBjcmVhdGVNb3VzZU1vdmVFdmVudCAoY3VyclBvc2l0aW9uOiBBeGlzVmFsdWVzRGF0YTxudW1iZXI+KTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IGF3YWl0IENEUEV2ZW50RGVzY3JpcHRvci5jcmVhdGVNb3VzZUV2ZW50T3B0aW9ucygnbW91c2VNb3ZlZCcsIHtcbiAgICAgICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICBjbGllbnRYOiBjdXJyUG9zaXRpb24ueCxcbiAgICAgICAgICAgICAgICBjbGllbnRZOiBjdXJyUG9zaXRpb24ueSxcbiAgICAgICAgICAgICAgICBidXR0b246ICAnbm9uZScsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogRXZlbnRUeXBlLk1vdXNlLFxuICAgICAgICAgICAgb3B0aW9ucyxcbiAgICAgICAgfTtcbiAgICB9XG59XG4iXX0=