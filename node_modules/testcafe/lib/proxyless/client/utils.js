"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.calculateMouseButtonValue = exports.getModifiersBit = exports.getModifiersState = exports.calculateKeyModifiersValue = void 0;
const types_1 = require("./types");
// @ts-ignore
const hammerhead_1 = require("../../client/core/deps/hammerhead");
const EMPTY_MODIFIERS = {
    ctrl: false,
    alt: false,
    shift: false,
    meta: false,
};
function calculateKeyModifiersValue(modifiers) {
    let result = 0;
    if (!modifiers)
        return result;
    if (modifiers.ctrl)
        result |= types_1.KeyModifierValues.ctrl;
    if (modifiers.alt)
        result |= types_1.KeyModifierValues.alt;
    if (modifiers.shift)
        result |= types_1.KeyModifierValues.shift;
    if (modifiers.meta)
        result |= types_1.KeyModifierValues.meta;
    return result;
}
exports.calculateKeyModifiersValue = calculateKeyModifiersValue;
function getModifiersState(modifiersBit) {
    const modifiers = hammerhead_1.utils.extend({}, EMPTY_MODIFIERS);
    if (!modifiersBit)
        return modifiers;
    if (modifiersBit & types_1.KeyModifierValues.ctrl)
        modifiers.ctrl = true;
    if (modifiersBit & types_1.KeyModifierValues.alt)
        modifiers.alt = true;
    if (modifiersBit & types_1.KeyModifierValues.shift)
        modifiers.shift = true;
    if (modifiersBit & types_1.KeyModifierValues.meta)
        modifiers.meta = true;
    return modifiers;
}
exports.getModifiersState = getModifiersState;
function getModifiersBit(key) {
    // @ts-ignore
    return types_1.KeyModifierValues[key] || 0;
}
exports.getModifiersBit = getModifiersBit;
function calculateMouseButtonValue(options) {
    if (options.button)
        return options.button;
    return 'left';
}
exports.calculateMouseButtonValue = calculateMouseButtonValue;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcHJveHlsZXNzL2NsaWVudC91dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxtQ0FBMEQ7QUFHMUQsYUFBYTtBQUNiLGtFQUEwRDtBQUUxRCxNQUFNLGVBQWUsR0FBRztJQUNwQixJQUFJLEVBQUcsS0FBSztJQUNaLEdBQUcsRUFBSSxLQUFLO0lBQ1osS0FBSyxFQUFFLEtBQUs7SUFDWixJQUFJLEVBQUcsS0FBSztDQUNmLENBQUM7QUFFRixTQUFnQiwwQkFBMEIsQ0FBRSxTQUF3QjtJQUNoRSxJQUFJLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFFZixJQUFJLENBQUMsU0FBUztRQUNWLE9BQU8sTUFBTSxDQUFDO0lBRWxCLElBQUksU0FBUyxDQUFDLElBQUk7UUFDZCxNQUFNLElBQUkseUJBQWlCLENBQUMsSUFBSSxDQUFDO0lBQ3JDLElBQUksU0FBUyxDQUFDLEdBQUc7UUFDYixNQUFNLElBQUkseUJBQWlCLENBQUMsR0FBRyxDQUFDO0lBQ3BDLElBQUksU0FBUyxDQUFDLEtBQUs7UUFDZixNQUFNLElBQUkseUJBQWlCLENBQUMsS0FBSyxDQUFDO0lBQ3RDLElBQUksU0FBUyxDQUFDLElBQUk7UUFDZCxNQUFNLElBQUkseUJBQWlCLENBQUMsSUFBSSxDQUFDO0lBRXJDLE9BQU8sTUFBTSxDQUFDO0FBQ2xCLENBQUM7QUFoQkQsZ0VBZ0JDO0FBRUQsU0FBZ0IsaUJBQWlCLENBQUUsWUFBcUI7SUFDcEQsTUFBTSxTQUFTLEdBQUcsa0JBQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLGVBQWUsQ0FBaUIsQ0FBQztJQUVwRSxJQUFJLENBQUMsWUFBWTtRQUNiLE9BQU8sU0FBUyxDQUFDO0lBRXJCLElBQUksWUFBWSxHQUFHLHlCQUFpQixDQUFDLElBQUk7UUFDckMsU0FBUyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDMUIsSUFBSSxZQUFZLEdBQUcseUJBQWlCLENBQUMsR0FBRztRQUNwQyxTQUFTLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQztJQUN6QixJQUFJLFlBQVksR0FBRyx5QkFBaUIsQ0FBQyxLQUFLO1FBQ3RDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO0lBQzNCLElBQUksWUFBWSxHQUFHLHlCQUFpQixDQUFDLElBQUk7UUFDckMsU0FBUyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFFMUIsT0FBTyxTQUFTLENBQUM7QUFDckIsQ0FBQztBQWhCRCw4Q0FnQkM7QUFFRCxTQUFnQixlQUFlLENBQUUsR0FBVztJQUN4QyxhQUFhO0lBQ2IsT0FBTyx5QkFBaUIsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDdkMsQ0FBQztBQUhELDBDQUdDO0FBRUQsU0FBZ0IseUJBQXlCLENBQUUsT0FBWTtJQUNuRCxJQUFJLE9BQU8sQ0FBQyxNQUFNO1FBQ2QsT0FBTyxPQUFPLENBQUMsTUFBTSxDQUFDO0lBRTFCLE9BQU8sTUFBTSxDQUFDO0FBQ2xCLENBQUM7QUFMRCw4REFLQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEtleU1vZGlmaWVycywgS2V5TW9kaWZpZXJWYWx1ZXMgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCBQcm90b2NvbCBmcm9tICdkZXZ0b29scy1wcm90b2NvbCc7XG5pbXBvcnQgTW91c2VCdXR0b24gPSBQcm90b2NvbC5JbnB1dC5Nb3VzZUJ1dHRvbjtcbi8vIEB0cy1pZ25vcmVcbmltcG9ydCB7IHV0aWxzIH0gZnJvbSAnLi4vLi4vY2xpZW50L2NvcmUvZGVwcy9oYW1tZXJoZWFkJztcblxuY29uc3QgRU1QVFlfTU9ESUZJRVJTID0ge1xuICAgIGN0cmw6ICBmYWxzZSxcbiAgICBhbHQ6ICAgZmFsc2UsXG4gICAgc2hpZnQ6IGZhbHNlLFxuICAgIG1ldGE6ICBmYWxzZSxcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBjYWxjdWxhdGVLZXlNb2RpZmllcnNWYWx1ZSAobW9kaWZpZXJzPzogS2V5TW9kaWZpZXJzKTogbnVtYmVyIHtcbiAgICBsZXQgcmVzdWx0ID0gMDtcblxuICAgIGlmICghbW9kaWZpZXJzKVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuXG4gICAgaWYgKG1vZGlmaWVycy5jdHJsKVxuICAgICAgICByZXN1bHQgfD0gS2V5TW9kaWZpZXJWYWx1ZXMuY3RybDtcbiAgICBpZiAobW9kaWZpZXJzLmFsdClcbiAgICAgICAgcmVzdWx0IHw9IEtleU1vZGlmaWVyVmFsdWVzLmFsdDtcbiAgICBpZiAobW9kaWZpZXJzLnNoaWZ0KVxuICAgICAgICByZXN1bHQgfD0gS2V5TW9kaWZpZXJWYWx1ZXMuc2hpZnQ7XG4gICAgaWYgKG1vZGlmaWVycy5tZXRhKVxuICAgICAgICByZXN1bHQgfD0gS2V5TW9kaWZpZXJWYWx1ZXMubWV0YTtcblxuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRNb2RpZmllcnNTdGF0ZSAobW9kaWZpZXJzQml0PzogbnVtYmVyKTogS2V5TW9kaWZpZXJzIHtcbiAgICBjb25zdCBtb2RpZmllcnMgPSB1dGlscy5leHRlbmQoe30sIEVNUFRZX01PRElGSUVSUykgYXMgS2V5TW9kaWZpZXJzO1xuXG4gICAgaWYgKCFtb2RpZmllcnNCaXQpXG4gICAgICAgIHJldHVybiBtb2RpZmllcnM7XG5cbiAgICBpZiAobW9kaWZpZXJzQml0ICYgS2V5TW9kaWZpZXJWYWx1ZXMuY3RybClcbiAgICAgICAgbW9kaWZpZXJzLmN0cmwgPSB0cnVlO1xuICAgIGlmIChtb2RpZmllcnNCaXQgJiBLZXlNb2RpZmllclZhbHVlcy5hbHQpXG4gICAgICAgIG1vZGlmaWVycy5hbHQgPSB0cnVlO1xuICAgIGlmIChtb2RpZmllcnNCaXQgJiBLZXlNb2RpZmllclZhbHVlcy5zaGlmdClcbiAgICAgICAgbW9kaWZpZXJzLnNoaWZ0ID0gdHJ1ZTtcbiAgICBpZiAobW9kaWZpZXJzQml0ICYgS2V5TW9kaWZpZXJWYWx1ZXMubWV0YSlcbiAgICAgICAgbW9kaWZpZXJzLm1ldGEgPSB0cnVlO1xuXG4gICAgcmV0dXJuIG1vZGlmaWVycztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldE1vZGlmaWVyc0JpdCAoa2V5OiBzdHJpbmcpOiBudW1iZXIge1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICByZXR1cm4gS2V5TW9kaWZpZXJWYWx1ZXNba2V5XSB8fCAwO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2FsY3VsYXRlTW91c2VCdXR0b25WYWx1ZSAob3B0aW9uczogYW55KTogTW91c2VCdXR0b24ge1xuICAgIGlmIChvcHRpb25zLmJ1dHRvbilcbiAgICAgICAgcmV0dXJuIG9wdGlvbnMuYnV0dG9uO1xuXG4gICAgcmV0dXJuICdsZWZ0Jztcbn1cbiJdfQ==